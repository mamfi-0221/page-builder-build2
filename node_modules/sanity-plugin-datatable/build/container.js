"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _uuid = _interopRequireDefault(require("uuid"));

var _patchEvent = _interopRequireWildcard(require("part:@sanity/form-builder/patch-event"));

var _primitives = require("./primitives");

var _table = _interopRequireDefault(require("./table"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _buttonGrid = _interopRequireDefault(require("part:@sanity/components/buttons/button-grid"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Container
 */
var Container = /*#__PURE__*/function (_Component) {
  _inherits(Container, _Component);

  var _super = _createSuper(Container);

  function Container(props) {
    var _this;

    _classCallCheck(this, Container);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "handleClear", function () {
      var value = (0, _lodash.cloneDeep)(_this.props.value);

      _this.props.onChange(_patchEvent["default"].from([(0, _patchEvent.setIfMissing)({
        _type: "table"
      }), (0, _patchEvent.set)(_objectSpread(_objectSpread({}, value), {}, {
        rows: value.rows.map(function (r) {
          return _objectSpread(_objectSpread({}, r), {}, {
            cells: r.cells.map(function (c) {
              return "";
            })
          });
        })
      }))]));
    });

    _defineProperty(_assertThisInitialized(_this), "handleRemoveRow", function (index) {
      var value = (0, _lodash.cloneDeep)(_this.props.value);

      _this.props.onChange(_patchEvent["default"].from([(0, _patchEvent.setIfMissing)({
        _type: "table"
      }), (0, _patchEvent.set)(_objectSpread(_objectSpread({}, value), {}, {
        rows: value.rows.filter(function (r, i) {
          return i !== index;
        })
      }))]));

      _this.setState({
        rows: _this.state.rows - 1
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleReset", function (index) {
      var value = (0, _lodash.cloneDeep)(_this.props.value);

      _this.props.onChange(_patchEvent["default"].from([(0, _patchEvent.setIfMissing)({
        _type: "table"
      }), (0, _patchEvent.set)(_objectSpread(_objectSpread({}, value), {}, {
        rows: []
      }))]));

      _this.setState({
        rows: 0,
        columns: 0
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleRemoveColumn", function (index) {
      var value = (0, _lodash.cloneDeep)(_this.props.value);

      _this.props.onChange(_patchEvent["default"].from([(0, _patchEvent.setIfMissing)({
        _type: "table"
      }), (0, _patchEvent.set)(_objectSpread(_objectSpread({}, value), {}, {
        rows: value.rows.map(function (r) {
          return _objectSpread(_objectSpread({}, r), {}, {
            cells: r.cells.filter(function (c, i) {
              return i !== index;
            })
          });
        })
      }))]));

      _this.setState({
        columns: _this.state.columns - 1
      });
    });

    _this.handleAddRow = _this.handleAddRow.bind(_assertThisInitialized(_this));
    _this.handleAddColumn = _this.handleAddColumn.bind(_assertThisInitialized(_this));
    _this.handleCellChange = _this.handleCellChange.bind(_assertThisInitialized(_this));
    var _props$value = props.value;
    _props$value = _props$value === void 0 ? {} : _props$value;
    var _props$value$rows = _props$value.rows,
        rows = _props$value$rows === void 0 ? [] : _props$value$rows;
    /**
     * Find out how many rows we have
     */

    var columns = rows.map(function (row) {
      return !row ? 0 : !row.cells ? 0 : row.cells.length;
    });
    /**
     * Set rows and columns
     */

    _this.state = {
      columns: Math.max.apply(Math, _toConsumableArray(columns).concat([0])),
      rows: rows.length
    };
    return _this;
  }
  /**
   * Add rows and columns
   */


  _createClass(Container, [{
    key: "handleAddRow",
    value: function handleAddRow(type) {
      var _this$state = this.state,
          rows = _this$state.rows,
          columns = _this$state.columns;
      this.setState({
        rows: rows + 1,
        columns: columns === 0 ? 1 : columns
      });
    }
  }, {
    key: "handleAddColumn",
    value: function handleAddColumn() {
      var _this$state2 = this.state,
          columns = _this$state2.columns,
          rows = _this$state2.rows;
      this.setState({
        columns: columns + 1,
        rows: rows === 0 ? 1 : rows
      });
    }
  }, {
    key: "handleCellChange",

    /**
     * Add a patch event to Sanity
     */
    value: function handleCellChange(e, row, column) {
      var input = e.target.value;
      var _this$props = this.props,
          onChange = _this$props.onChange,
          value = _this$props.value,
          _this$props$type = _this$props.type;
      _this$props$type = _this$props$type === void 0 ? {} : _this$props$type;
      var name = _this$props$type.name;
      /**
       * Get all table data
       */

      var updatedData = (0, _lodash.cloneDeep)(value) || {};
      /**
       * Convert all null values to strings
       */

      var convertNulls = function convertNulls() {
        var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        return (0, _lodash.range)(rows.length).map(function (index) {
          var row = rows[index];
          return {
            _type: row && row._type ? row._type : "column",
            _key: row && row._key ? row._key : _uuid["default"].v4(),
            cells: row && row.cells ? (0, _lodash.range)(row.cells.length).map(function (cellIndex) {
              var cell = row.cells[cellIndex];
              return cell ? cell : "";
            }) : []
          };
        });
      };

      updatedData.rows = convertNulls(updatedData.rows);
      /**
       * Add rows if not existing
       */

      if (!updatedData.rows[row]) {
        updatedData.rows[row] = {
          _type: "column",
          _key: _uuid["default"].v4(),
          cells: []
        };
      }
      /**
       * Add new values do data
       */


      updatedData.rows[row].cells[column] = input;
      /**
       * Check for null values again
       */

      updatedData.rows = convertNulls(updatedData.rows);
      /**
       * Add Sanity patch
       */

      onChange(_patchEvent["default"].from([(0, _patchEvent.setIfMissing)({
        _type: "table"
      }), updatedData ? (0, _patchEvent.set)(updatedData) : (0, _patchEvent.unset)(name)]));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          _this$props2$value = _this$props2.value;
      _this$props2$value = _this$props2$value === void 0 ? {} : _this$props2$value;
      var _this$props2$value$ro = _this$props2$value.rows,
          rowsContent = _this$props2$value$ro === void 0 ? [] : _this$props2$value$ro,
          _this$props2$type = _this$props2.type;
      _this$props2$type = _this$props2$type === void 0 ? {} : _this$props2$type;
      var title = _this$props2$type.title;
      var _this$state3 = this.state,
          columns = _this$state3.columns,
          rows = _this$state3.rows;
      /**
       * Map data to multidimensional array
       * [[0, 1], [2, 3]]
       */

      var tableData = rowsContent.map(function (row) {
        return row && row.cells && row.cells;
      });
      /**
       * Render
       */

      return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_primitives.Heading, null, title), /*#__PURE__*/_react["default"].createElement(_table["default"], {
        data: tableData,
        rows: rows,
        columns: columns,
        handleChange: this.handleCellChange,
        onReset: this.handleReset,
        onRemoveRow: this.handleRemoveRow,
        onRemoveColumn: this.handleRemoveColumn
      }), /*#__PURE__*/_react["default"].createElement(_buttonGrid["default"], null, /*#__PURE__*/_react["default"].createElement(_default2["default"], {
        onClick: this.handleAddRow
      }, "Add row"), /*#__PURE__*/_react["default"].createElement(_default2["default"], {
        onClick: this.handleAddColumn
      }, "Add column"), /*#__PURE__*/_react["default"].createElement(_default2["default"], {
        onClick: this.handleClear,
        color: "danger"
      }, "Empty cells")));
    }
  }]);

  return Container;
}(_react.Component);

var _default = Container;
exports["default"] = _default;