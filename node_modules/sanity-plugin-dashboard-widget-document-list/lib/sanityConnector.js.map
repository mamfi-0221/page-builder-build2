{"version":3,"sources":["../src/sanityConnector.js"],"names":["withConfig","config","sanityClient","draftId","nonDraftDoc","_id","prepareDocumentList","incoming","apiVersion","Promise","resolve","documents","Array","isArray","ids","filter","doc","startsWith","map","fetch","then","drafts","outgoing","foundDraft","find","draft","catch","error","Error","message","getSubscription","query","params","listen","events","includeResult","visibility","pipe","event","type","JSON","stringify","module","exports"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,UAAU,GAAGC,MAAM,IAAI;AAC3B,SAAO,OAAOC,gBAAaF,UAApB,KAAmC,UAAnC,GACHE,gBAAaF,UAAb,CAAwBC,MAAxB,CADG,GAEHC,eAFJ;AAGD,CAJD;;AAMA,IAAMC,OAAO,GAAGC,WAAW,qBAAcA,WAAW,CAACC,GAA1B,CAA3B;;AAEA,IAAMC,mBAAmB,GAAG,CAACC,QAAD,EAAWC,UAAX,KAA0B;AACpD,MAAI,CAACD,QAAL,EAAe;AACb,WAAOE,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AACD,MAAMC,SAAS,GAAGC,KAAK,CAACC,OAAN,CAAcN,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAvD;AAEA,MAAMO,GAAG,GAAGH,SAAS,CAClBI,MADS,CACFC,GAAG,IAAI,CAACA,GAAG,CAACX,GAAJ,CAAQY,UAAR,CAAmB,SAAnB,CADN,EAETC,GAFS,CAELf,OAFK,CAAZ;AAIA,SAAOH,UAAU,CAAC;AAACQ,IAAAA;AAAD,GAAD,CAAV,CAAyBW,KAAzB,CAA+B,gBAA/B,EAAiD;AAACL,IAAAA;AAAD,GAAjD,EACJM,IADI,CACCC,MAAM,IAAI;AACd,QAAMC,QAAQ,GAAGX,SAAS,CAACO,GAAV,CAAcF,GAAG,IAAI;AACpC,UAAMO,UAAU,GAAGF,MAAM,CAACG,IAAP,CAAYC,KAAK,IAAIA,KAAK,CAACpB,GAAN,KAAcF,OAAO,CAACa,GAAD,CAA1C,CAAnB;AACA,aAAOO,UAAU,IAAIP,GAArB;AACD,KAHgB,CAAjB;AAIA,WAAO,oBAAOM,QAAP,EAAiB,KAAjB,CAAP;AACD,GAPI,EAQJI,KARI,CAQEC,KAAK,IAAI;AACd,UAAM,IAAIC,KAAJ,kCAAoCd,GAApC,sBAAmDa,KAAK,CAACE,OAAzD,EAAN;AACD,GAVI,CAAP;AAWD,CArBD;;AAuBA,IAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,MAAR,EAAgBxB,UAAhB,KACtBR,UAAU,CAAC;AAACQ,EAAAA;AAAD,CAAD,CAAV,CACGyB,MADH,CACUF,KADV,EACiBC,MADjB,EACyB;AAACE,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,UAAZ,CAAT;AAAkCC,EAAAA,aAAa,EAAE,KAAjD;AAAwDC,EAAAA,UAAU,EAAE;AAApE,CADzB,EAEGC,IAFH,CAEQ,0BAAUC,KAAK,IAAI;AACvB,SAAO,cAAa,CAAb,EAAgBD,IAAhB,CACLC,KAAK,CAACC,IAAN,KAAe,SAAf,GAA2B,qBAA3B,GAAmC,sBAAM,IAAN,CAD9B,EAEL,yBAAS,MAAMvC,UAAU,CAAC;AAACQ,IAAAA;AAAD,GAAD,CAAV,CAAyBW,KAAzB,CAA+BY,KAA/B,EAAsCC,MAAtC,EACZZ,IADY,CACPb,QAAQ,IAAI;AAChB,WAAOD,mBAAmB,CAACC,QAAD,EAAWC,UAAX,CAA1B;AACD,GAHY,EAIZkB,KAJY,CAINC,KAAK,IAAI;AACd,QAAIA,KAAK,CAACE,OAAN,CAAcZ,UAAd,CAAyB,wBAAzB,CAAJ,EAAwD;AACtD,YAAMU,KAAN;AACD;;AACD,UAAM,IAAIC,KAAJ,wBAA0BG,KAA1B,kBAAuCS,IAAI,CAACC,SAAL,CAAeT,MAAf,CAAvC,sBAAyEL,KAAK,CAACE,OAA/E,EAAN;AACD,GATY,CAAf,CAFK,CAAP;AAaD,CAdK,CAFR,CADF;;AAoBAa,MAAM,CAACC,OAAP,GAAiB;AACfb,EAAAA;AADe,CAAjB","sourcesContent":["import {of as observableOf} from 'rxjs'\nimport {switchMap, delay, tap, mergeMap} from 'rxjs/operators'\nimport {uniqBy} from 'lodash'\nimport sanityClient from 'part:@sanity/base/client'\n\nconst withConfig = config => {\n  return typeof sanityClient.withConfig === 'function'\n    ? sanityClient.withConfig(config)\n    : sanityClient\n}\n\nconst draftId = nonDraftDoc => `drafts.${nonDraftDoc._id}`\n\nconst prepareDocumentList = (incoming, apiVersion) => {\n  if (!incoming) {\n    return Promise.resolve([])\n  }\n  const documents = Array.isArray(incoming) ? incoming : [incoming]\n\n  const ids = documents\n    .filter(doc => !doc._id.startsWith('drafts.'))\n    .map(draftId)\n\n  return withConfig({apiVersion}).fetch('*[_id in $ids]', {ids})\n    .then(drafts => {\n      const outgoing = documents.map(doc => {\n        const foundDraft = drafts.find(draft => draft._id === draftId(doc))\n        return foundDraft || doc\n      })\n      return uniqBy(outgoing, '_id')\n    })\n    .catch(error => {\n      throw new Error(`Problems fetching docs ${ids}. Error: ${error.message}`)\n    })\n}\n\nconst getSubscription = (query, params, apiVersion) =>\n  withConfig({apiVersion})\n    .listen(query, params, {events: ['welcome', 'mutation'], includeResult: false, visibility: 'query'})\n    .pipe(switchMap(event => {\n      return observableOf(1).pipe(\n        event.type === 'welcome' ? tap() : delay(1000),\n        mergeMap(() => withConfig({apiVersion}).fetch(query, params)\n          .then(incoming => {\n            return prepareDocumentList(incoming, apiVersion)\n          })\n          .catch(error => {\n            if (error.message.startsWith('Problems fetching docs')) {\n              throw error\n            }\n            throw new Error(`Query failed ${query} and ${JSON.stringify(params)}. Error: ${error.message}`)\n          }))\n      )\n    }))\n\n\nmodule.exports = {\n  getSubscription\n}\n"],"file":"sanityConnector.js"}