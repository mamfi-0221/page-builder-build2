"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _router = require("part:@sanity/base/router");

var _preview = _interopRequireDefault(require("part:@sanity/base/preview"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _intent = _interopRequireDefault(require("part:@sanity/components/buttons/intent"));

var _default2 = require("part:@sanity/components/lists/default");

var _draftUtils = require("part:@sanity/base/util/draft-utils");

var _lodash = require("lodash");

var _sanityConnector = require("./sanityConnector");

var _DocumentList = _interopRequireDefault(require("./DocumentList.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var schemaTypeNames = _schema.default.getTypeNames();

class DocumentList extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      documents: null,
      loading: true,
      error: null
    });

    _defineProperty(this, "componentDidMount", () => {
      var _this$props = this.props,
          query = _this$props.query,
          limit = _this$props.limit,
          apiVersion = _this$props.apiVersion;

      var _this$assembleQuery = this.assembleQuery(),
          assembledQuery = _this$assembleQuery.assembledQuery,
          params = _this$assembleQuery.params;

      if (!assembledQuery) {
        return;
      }

      this.unsubscribe();
      this.subscription = (0, _sanityConnector.getSubscription)(assembledQuery, params, apiVersion).subscribe({
        next: documents => this.setState({
          documents: documents.slice(0, limit),
          loading: false
        }),
        error: _error => this.setState({
          error: _error,
          query,
          loading: false
        })
      });
    });

    _defineProperty(this, "assembleQuery", () => {
      var _this$props2 = this.props,
          query = _this$props2.query,
          queryParams = _this$props2.queryParams,
          types = _this$props2.types,
          order = _this$props2.order,
          limit = _this$props2.limit;

      if (query) {
        return {
          assembledQuery: query,
          params: queryParams
        };
      }

      var documentTypes = schemaTypeNames.filter(typeName => {
        var schemaType = _schema.default.get(typeName);

        return schemaType.type && schemaType.type.name === 'document';
      });
      return {
        assembledQuery: "*[_type in $types] | order(".concat(order, ") [0...").concat(limit * 2, "]"),
        params: {
          types: types ? (0, _lodash.intersection)(types, documentTypes) : documentTypes
        }
      };
    });
  }

  componentWillUnmount() {
    this.unsubscribe();
  }

  unsubscribe() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }

  render() {
    var _this$props3 = this.props,
        title = _this$props3.title,
        types = _this$props3.types,
        showCreateButton = _this$props3.showCreateButton,
        createButtonText = _this$props3.createButtonText;
    var _this$state = this.state,
        documents = _this$state.documents,
        loading = _this$state.loading,
        error = _this$state.error;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: _DocumentList.default.container
    }, /*#__PURE__*/_react.default.createElement("header", {
      className: _DocumentList.default.header
    }, /*#__PURE__*/_react.default.createElement("h2", {
      className: _DocumentList.default.title
    }, title)), /*#__PURE__*/_react.default.createElement("div", {
      className: _DocumentList.default.content
    }, error && /*#__PURE__*/_react.default.createElement("div", null, error.message), !error && loading && /*#__PURE__*/_react.default.createElement(_spinner.default, {
      center: true,
      message: "Loading..."
    }), !error && !documents && !loading && /*#__PURE__*/_react.default.createElement("div", null, "Could not locate any documents :/"), /*#__PURE__*/_react.default.createElement(_default2.List, null, documents && documents.map(doc => {
      var type = _schema.default.get(doc._type);

      return /*#__PURE__*/_react.default.createElement(_default2.Item, {
        key: doc._id
      }, /*#__PURE__*/_react.default.createElement(_router.IntentLink, {
        intent: "edit",
        params: {
          type: doc._type,
          id: (0, _draftUtils.getPublishedId)(doc._id)
        },
        className: _DocumentList.default.link
      }, /*#__PURE__*/_react.default.createElement(_preview.default, {
        layout: "default",
        type: type,
        value: doc,
        key: doc._id
      })));
    }))), types && types.length === 1 && showCreateButton && /*#__PURE__*/_react.default.createElement("div", {
      className: _DocumentList.default.footer
    }, /*#__PURE__*/_react.default.createElement(_intent.default, {
      bleed: true,
      color: "primary",
      kind: "simple",
      intent: "create",
      params: {
        type: types[0]
      }
    }, createButtonText || "Create new ".concat(types[0]))));
  }

}

_defineProperty(DocumentList, "propTypes", {
  title: _propTypes.default.string,
  types: _propTypes.default.arrayOf(_propTypes.default.string),
  query: _propTypes.default.string,
  queryParams: _propTypes.default.object,
  // eslint-disable-line react/forbid-prop-types
  order: _propTypes.default.string,
  limit: _propTypes.default.number,
  showCreateButton: _propTypes.default.bool,
  createButtonText: _propTypes.default.string,
  apiVersion: _propTypes.default.string
});

_defineProperty(DocumentList, "defaultProps", {
  title: 'Last created',
  order: '_createdAt desc',
  limit: 10,
  types: null,
  query: null,
  queryParams: {},
  showCreateButton: true,
  createButtonText: null,
  apiVersion: 'v1'
});

var _default = DocumentList;
exports.default = _default;
//# sourceMappingURL=DocumentList.js.map