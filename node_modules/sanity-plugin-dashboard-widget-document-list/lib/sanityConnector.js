"use strict";

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _lodash = require("lodash");

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var withConfig = config => {
  return typeof _client.default.withConfig === 'function' ? _client.default.withConfig(config) : _client.default;
};

var draftId = nonDraftDoc => "drafts.".concat(nonDraftDoc._id);

var prepareDocumentList = (incoming, apiVersion) => {
  if (!incoming) {
    return Promise.resolve([]);
  }

  var documents = Array.isArray(incoming) ? incoming : [incoming];
  var ids = documents.filter(doc => !doc._id.startsWith('drafts.')).map(draftId);
  return withConfig({
    apiVersion
  }).fetch('*[_id in $ids]', {
    ids
  }).then(drafts => {
    var outgoing = documents.map(doc => {
      var foundDraft = drafts.find(draft => draft._id === draftId(doc));
      return foundDraft || doc;
    });
    return (0, _lodash.uniqBy)(outgoing, '_id');
  }).catch(error => {
    throw new Error("Problems fetching docs ".concat(ids, ". Error: ").concat(error.message));
  });
};

var getSubscription = (query, params, apiVersion) => withConfig({
  apiVersion
}).listen(query, params, {
  events: ['welcome', 'mutation'],
  includeResult: false,
  visibility: 'query'
}).pipe((0, _operators.switchMap)(event => {
  return (0, _rxjs.of)(1).pipe(event.type === 'welcome' ? (0, _operators.tap)() : (0, _operators.delay)(1000), (0, _operators.mergeMap)(() => withConfig({
    apiVersion
  }).fetch(query, params).then(incoming => {
    return prepareDocumentList(incoming, apiVersion);
  }).catch(error => {
    if (error.message.startsWith('Problems fetching docs')) {
      throw error;
    }

    throw new Error("Query failed ".concat(query, " and ").concat(JSON.stringify(params), ". Error: ").concat(error.message));
  })));
}));

module.exports = {
  getSubscription
};
//# sourceMappingURL=sanityConnector.js.map